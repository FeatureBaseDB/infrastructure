AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DomainName:
    Default: sandbox.pilosa.com
    Description: DNS domain for pilosa and agent cluster.
    Type: String
  AMI:
    Default: ami-e3c3b8f4
    Description: AMI to use for pilosa instance
    Type: String
  AgentInstanceType:
    Default: c4.large
    Description: Instance type of agent nodes
    Type: String
  ClusterName:
    Default: cluster0
    Description: Unique name for this pilosa cluster. Used in DNS (node0.{ClusterName}.{DomainName})
    Type: String
  InstanceType:
    Default: m4.large
    Description: Instance type of pilosa
    Type: String
  KeyPair:
    Description: Key pair to use for sudoer user
    Type: String
  Subnet:
    Description: Subnet to use for pilosa instance
    Type: String
  VPC:
    Description: VPC to use for pilosa instance
    Type: String
  VolumeSize:
    Default: '10'
    Description: Space (in GB) of the root EBS volume for pilosa instances.
    Type: Number
  VolumeType:
    Default: gp2
    Description: AWS volume type of the root EBS volume for pilosa instances.
    Type: String
  Replicas:
    Default: 1
    Description: Number of Pilosa replicas
    Type: Number
  PilosaVersion:
    Default: 'master'
    Description: Pilosa version to use - must be a valid argument to 'git checkout'.
    Type: String
  PDKVersion:
    Default: 'master'
    Description: PDK version to use - must be a valid argument to 'git checkout'.
    Type: String
Resources:
  {{- range $i, $_ := loop .stack.agents }}
  PilosaAgentInstance{{ $i }}:
    Properties:
      IamInstanceProfile: !Ref 'PilosaInstanceProfile'
      ImageId: !Ref 'AMI'
      InstanceType: !Ref 'AgentInstanceType'
      KeyName: !Ref 'KeyPair'
      PlacementGroupName: !Ref 'PilosaPlacementGroup'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeleteOnTermination: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'PilosaInstanceSecurityGroup'
          SubnetId: !Ref 'Subnet'
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          # install prereqs
          apt-get update
          apt-get -y install git
          apt-get -y install make

          # install go
          mkdir -p /usr/local/go
          wget https://storage.googleapis.com/golang/go1.10.linux-amd64.tar.gz
          tar -C /usr/local -xzf go1.10.linux-amd64.tar.gz
          chown -R ubuntu:ubuntu /usr/local/go
          mkdir -p /home/ubuntu/go/src/github.com/pilosa
          mkdir -p /home/ubuntu/go/bin
          GOPATH=/home/ubuntu/go
          export GOPATH
          PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
          export PATH

          # set up GOPATH in .bashrc
          cat >> /home/ubuntu/.bashrc <<"<<">>- EOF
              export GOPATH=/home/ubuntu/go
              export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
          EOF

          apt-get -y install gcc
          apt-get -y install libpcap-dev

          # install pdk
          go get -u github.com/pilosa/pdk
          cd $GOPATH/src/github.com/pilosa/pdk
          git checkout ${PDKVersion}
          make install


          # clean up root's mess
          chown -R ubuntu:ubuntu /home/ubuntu

    Type: AWS::EC2::Instance
  AgentPrivateRecordSet{{ $i }}:
    Properties:
      HostedZoneId: !Ref 'PilosaZone'
      Name: !Sub 'agent{{ $i }}.${ClusterName}.${DomainName}.'
      ResourceRecords:
        - !GetAtt 'PilosaAgentInstance{{ $i }}.PrivateIp'
      TTL: '300'
      Type: A
    Type: AWS::Route53::RecordSet
  AgentPublicRecordSet0:
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      Name: !Sub 'agent{{ $i }}.${ClusterName}.${DomainName}.'
      ResourceRecords:
        - !GetAtt 'PilosaAgentInstance{{ $i }}.PublicIp'
      TTL: '300'
      Type: A
    Type: AWS::Route53::RecordSet
  {{- end }}
  {{- range $i, $_ := loop .stack.nodes }}
  PilosaInstance{{ $i }}:
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref 'VolumeSize'
            VolumeType: !Ref 'VolumeType'
      IamInstanceProfile: !Ref 'PilosaInstanceProfile'
      ImageId: !Ref 'AMI'
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyPair'
      PlacementGroupName: !Ref 'PilosaPlacementGroup'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeleteOnTermination: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'PilosaInstanceSecurityGroup'
          SubnetId: !Ref 'Subnet'
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          # install prereqs
          apt-get update
          apt-get -y install git
          apt-get -y install make
          # linux-aws works around a bug with nvme drives https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1668129
          apt-get -y install linux-aws

          # install go
          mkdir -p /usr/local/go
          wget https://storage.googleapis.com/golang/go1.10.linux-amd64.tar.gz
          tar -C /usr/local -xzf go1.10.linux-amd64.tar.gz
          chown -R ubuntu:ubuntu /usr/local/go
          mkdir -p /home/ubuntu/go/src/github.com/pilosa
          mkdir -p /home/ubuntu/go/bin
          GOPATH=/home/ubuntu/go
          export GOPATH
          PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
          export PATH

          # set up GOPATH in .bashrc
          cat >> /home/ubuntu/.bashrc <<"<<">>- EOF
              export GOPATH=/home/ubuntu/go
              export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
          EOF


          # update open file limits
          cat >> /etc/security/limits.conf <<"<<">>- EOF
              * soft nofile 262144
              * hard nofile 262144
              * hard memlock unlimited
              * soft memlock unlimited
          EOF

          # install pilosa from github - retry up to 5 times
          n=0
          until [ $n -ge 5 ]
          do
            go get -u github.com/pilosa/pilosa && break
            n=$[$n+1]
            sleep 5
          done
          cd $GOPATH/src/github.com/pilosa/pilosa
          git checkout ${PilosaVersion}
          make install

          # set up pilosa config file
          cat > /etc/pilosa.cfg <<"<<">>- EOF
              data-dir = "/home/ubuntu/pilosa/data1"
              bind = "node{{ $i }}.${ClusterName}.${DomainName}:10101"
              log-path = "/home/ubuntu/pilosa.log"

              [gossip]
              port = 12000
              seeds = ["node0.${ClusterName}.${DomainName}:12000"
              {{- if gt $.stack.nodes 1 -}} , "node1.${ClusterName}.${DomainName}:12000" {{- end}}]

              [cluster]
              replicas = ${Replicas}
              coordinator = {{ if eq $i 0 }} true {{ else }} false {{ end }}
          EOF


          # clean up root's mess
          chown -R ubuntu:ubuntu /home/ubuntu

          # all output should go to pilosa.log - pilosa.out should be empty
          ulimit -n 262144
          ulimit -l unlimited
          sudo -u ubuntu touch /home/ubuntu/pilosa.out
          sudo -u ubuntu PATH=$PATH nohup pilosa server --config=/etc/pilosa.cfg &>> /home/ubuntu/pilosa.out &

    Type: AWS::EC2::Instance
  PilosaPrivateRecordSet{{ $i }}:
    Properties:
      HostedZoneId: !Ref 'PilosaZone'
      Name: !Sub 'node{{ $i }}.${ClusterName}.${DomainName}.'
      ResourceRecords:
        - !GetAtt 'PilosaInstance{{ $i }}.PrivateIp'
      TTL: '300'
      Type: A
    Type: AWS::Route53::RecordSet
  PilosaPublicRecordSet{{ $i }}:
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      Name: !Sub 'node{{ $i }}.${ClusterName}.${DomainName}.'
      ResourceRecords:
        - !GetAtt 'PilosaInstance{{ $i }}.PublicIp'
      TTL: '300'
      Type: A
    Type: AWS::Route53::RecordSet
  {{- end }}
  PilosaPlacementGroup:
    Type: AWS::EC2::PlacementGroup
  PilosaInstanceProfile:
    Properties:
      Roles:
        - !Ref 'PilosaRole'
    Type: AWS::IAM::InstanceProfile
  PilosaInstanceSecurityGroup:
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
        - CidrIp: 0.0.0.0/0
          FromPort: '10101'
          IpProtocol: tcp
          ToPort: '10101'
        - CidrIp: 0.0.0.0/0
          FromPort: '8000'
          IpProtocol: tcp
          ToPort: '8000'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  PilosaIngress:
    Properties:
      FromPort: '10101'
      GroupId: !Ref 'PilosaInstanceSecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref 'PilosaInstanceSecurityGroup'
      ToPort: '10101'
    Type: AWS::EC2::SecurityGroupIngress
  PilosaInternalIngress:
    Properties:
      FromPort: '12000'
      GroupId: !Ref 'PilosaInstanceSecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref 'PilosaInstanceSecurityGroup'
      ToPort: '12000'
    Type: AWS::EC2::SecurityGroupIngress
  PilosaInternalIngressUDP:
    Properties:
      FromPort: '12000'
      GroupId: !Ref 'PilosaInstanceSecurityGroup'
      IpProtocol: udp
      SourceSecurityGroupId: !Ref 'PilosaInstanceSecurityGroup'
      ToPort: '12000'
    Type: AWS::EC2::SecurityGroupIngress
  PilosaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Policies: []
    Type: AWS::IAM::Role
  PilosaZone:
    Properties:
      Name: !Sub '${ClusterName}.${DomainName}'
      VPCs:
        - VPCId: !Ref 'VPC'
          VPCRegion: !Ref 'AWS::Region'
    Type: AWS::Route53::HostedZone
